package types

import (
	"context"
	"encoding/json"
	"math"
	"sync"
	"time"

	"github.com/pkg/errors"
)

const (
	FutureTaskState_PENDING  uint8 = 0
	FutureTaskState_RESOLVED uint8 = 1
	FutureTaskState_REJECTED uint8 = 2
)

var InvalidFutureMeta = FutureMeta{LocalId: math.MaxUint64, State: math.MaxUint8}

// Serializable
type FutureMeta struct {
	// for append, it's the localid, also book id, generated by log.engine.LogProducer
	// for read, it's the local op id generated by worker
	LocalId uint64 `json:"localid"`
	State   uint8  `json:"state"`
}

func (fm FutureMeta) Serialize() ([]byte, error) {
	return json.Marshal(fm)
}
func DeserializeFutureMeta(data []byte) (FutureMeta, error) {
	var fm FutureMeta
	err := json.Unmarshal(data, &fm)
	return fm, errors.Wrapf(err, "invalid data: %v", data)
}

func (fm FutureMeta) IsValid() bool {
	return fm != InvalidFutureMeta
}

// Implement types.Future
type futureImpl[T uint64 | *CondLogEntry] struct {
	metaStateMu sync.RWMutex
	FutureMeta
	// result union
	result T
	err    error

	// sync
	wg sync.WaitGroup
}

func NewFuture[T uint64 | *CondLogEntry](localId uint64, resolve func() (T, error)) Future[T] {
	var emptyRes T
	future := &futureImpl[T]{
		metaStateMu: sync.RWMutex{},
		FutureMeta: FutureMeta{
			LocalId: localId,
			State:   FutureTaskState_PENDING,
		},
		result: emptyRes,
		err:    nil,
		wg:     sync.WaitGroup{},
	}
	future.wg.Add(1)
	go func(fu *futureImpl[T]) {
		res, err := resolve()
		if err == nil {
			fu.metaStateMu.Lock()
			fu.State = FutureTaskState_RESOLVED
			fu.metaStateMu.Unlock()
			fu.result = res
			fu.err = nil
		} else {
			fu.metaStateMu.Lock()
			fu.State = FutureTaskState_REJECTED
			fu.metaStateMu.Unlock()
			fu.err = err
		}
		fu.wg.Done()
	}(future)
	return future
}

func (f *futureImpl[T]) GetResult() (T, error) {
	f.wg.Wait()
	return f.result, f.err
}

func (f *futureImpl[T]) Await(timeout time.Duration) error {
	// log.Printf("wait future=%+v with timeout=%v", f, timeout)
	ctx, cancel := context.WithTimeout(context.Background(), timeout)
	defer cancel()
	awaitDone := make(chan struct{})
	go func() {
		f.wg.Wait()
		awaitDone <- struct{}{}
	}()

	select {
	case <-ctx.Done():
		// log.Printf("wait future=%+v timeout", f)
		return ctx.Err()
	case <-awaitDone:
		// log.Printf("wait future=%+v without error", f)
		return nil
	}
}

func (f *futureImpl[T]) GetMeta() FutureMeta {
	f.metaStateMu.RLock()
	defer f.metaStateMu.RUnlock()
	return FutureMeta{
		LocalId: f.LocalId,
		State:   f.State,
	}
}
